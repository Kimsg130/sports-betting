
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author mukim
 */
public class BettingList extends javax.swing.JFrame {
    DB_MAN DBM = new DB_MAN();
    String strSQL = "SELECT user_id FROM betting GROUP BY user_id ORDER BY user_id;";
    String strQuery = "SELECT * FROM betting ORDER BY user_id";
    int count = 0;
    /**
     * Creates new form Schedule
     */
    public BettingList() {
        initComponents();
        super.getContentPane().setBackground(Color.WHITE);
        try {
            DBM.dbOpen();
            getCombobox(strSQL);
            getDBData(strQuery);
            DBM.dbClose();
        } catch (Exception e) {
            System.out.println("SQLException(constructor) : "+e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        comboId = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        bettingTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel2.setText("아이디 : ");

        comboId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<ALL>" }));
        comboId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboIdKeyPressed(evt);
            }
        });

        btnSearch.setText("검색");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        btnSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSearchKeyPressed(evt);
            }
        });

        bettingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "경기번호", "아이디", "베팅포인트", "배당률", "상태", "손익", "배팅일자"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bettingTable.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(bettingTable);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setForeground(java.awt.SystemColor.activeCaptionBorder);
        jLabel1.setText("Games Management");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel3.setForeground(java.awt.SystemColor.activeCaptionBorder);
        jLabel3.setText("Betting List");

        comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<ALL>", "예정", "적중", "적중 안됨", "지급 완료" }));
        comboStatus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboStatusKeyPressed(evt);
            }
        });

        jLabel4.setText("상태 : ");

        btnUpdate.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        btnUpdate.setText("갱신");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboId, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(201, 201, 201)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdate)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 142, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 141, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel3)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(comboId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        strQuery = "Select * From betting";
        String searchingId = comboId.getSelectedItem().toString();
        String searchingStatus = comboStatus.getSelectedItem().toString();
        
        if(!searchingId.equals("<ALL>")){
            strQuery += " WHERE (user_id = '"+searchingId+"'";
            if(!searchingStatus.equals("<ALL>")){ // ALL X ALL X
                strQuery += " AND status = '"+searchingStatus+"');";
            }else{ // ALL X ALL
                strQuery += ");";
            }
        }else{ 
            if(!searchingStatus.equals("<ALL>")){ // ALL ALL X
                strQuery += " WHERE status = '"+searchingStatus+"';";
            }else{ // ALL ALL
                strQuery += ";";
            }
        }
        
        try {
            DBM.dbOpen();
            getDBData(strQuery);
            DBM.dbClose();
        } catch (Exception e) {
            System.out.println("SQLException(btnSearch) : "+e.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        
    }//GEN-LAST:event_formKeyPressed

    private void comboStatusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboStatusKeyPressed
        //엔터키 구현
        if(evt.getKeyChar() == KeyEvent.VK_ENTER){
            btnSearchActionPerformed(null);
        }
    }//GEN-LAST:event_comboStatusKeyPressed

    private void comboIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboIdKeyPressed
        //엔터키 구현
        if(evt.getKeyChar() == KeyEvent.VK_ENTER){
            btnSearchActionPerformed(null);
        }
    }//GEN-LAST:event_comboIdKeyPressed

    private void btnSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSearchKeyPressed
        //엔터키 구현
        if(evt.getKeyChar() == KeyEvent.VK_ENTER){
            btnSearchActionPerformed(null);
        }
    }//GEN-LAST:event_btnSearchKeyPressed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        strQuery = "SELECT * FROM betting WHERE status = '예정';";
        try {
            DBM.dbOpen();
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            ArrayList<String[]> arr = new ArrayList<String[]>();
            count = 0;
            while(DBM.DB_rs.next()){
                String g_no = DBM.DB_rs.getString("G_no");
                String b_no = DBM.DB_rs.getString("B_no");
                String choice = DBM.DB_rs.getString("user_choice");
                
                String[] sarray = {g_no, b_no, choice};
                arr.add(sarray);
            }
            
            for (String[] s : arr){
                updateBetting(s[0], s[1], s[2]);
            }
            JOptionPane.showMessageDialog(null, count+"건의 베팅기록이 갱신되었습니다.");
            refresh();
            DBM.DB_rs.close();
            DBM.dbClose();
        } catch (Exception e) {
            System.out.println("btnupdate : "+e);
            JOptionPane.showMessageDialog(null, "예기치 못한 오류가 발생했습니다.");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed
    
    public final void getDBData(String strQuery) {
        DefaultTableModel model = (DefaultTableModel)bettingTable.getModel();
        int rowcount = model.getRowCount();
        for(int i = 0; i < rowcount; i++){
            model.removeRow(0);
        }

        try {
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while (DBM.DB_rs.next()) {
                ArrayList<String> rowData = new ArrayList<String>();
                rowData.add(DBM.DB_rs.getString("G_no"));
                rowData.add(DBM.DB_rs.getString("user_id"));
                rowData.add(DBM.DB_rs.getString("betting_point"));
                rowData.add(DBM.DB_rs.getString("odds"));
                rowData.add(DBM.DB_rs.getString("status"));
                //순이익 point = (status == 적중) ? point*odds : point * -1; 
                String gain = "YET";
                if(DBM.DB_rs.getString("status").equals("적중")){
                    Double point = Double.parseDouble(DBM.DB_rs.getString("betting_point"));
                    Double odds = Double.parseDouble(DBM.DB_rs.getString("odds"));
                    gain = "+"+Long.toString(Math.round(point * odds));
                }else if(DBM.DB_rs.getString("status").equals("적중 안됨")){
                    String point = DBM.DB_rs.getString("betting_point");
                    gain = "-"+point;
                }
                rowData.add(gain);
                rowData.add(DBM.DB_rs.getString("betting_date").split(" ")[0]);
                
                model.addRow(rowData.toArray());
            }
            DBM.DB_rs.close();
        } catch (Exception e) {
            System.out.println("SQLException(getDBData) : " + e.getMessage());
        }
    }
    
    public final void getCombobox(String strQuery) {
        try {
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while (DBM.DB_rs.next()) {
                comboId.addItem(DBM.DB_rs.getString("user_id"));
            }
            DBM.DB_rs.close();
            
        } catch (Exception e) {
            System.out.println("SQLException(getCombobox) : " + e.getMessage());
        } 
    }
    
    private void updateBetting(String g_no, String b_no, String user_choice){
        String query = "SELECT * FROM games WHERE G_no = "+g_no+";";
        try {
            DBM.DB_rs = DBM.DB_stmt.executeQuery(query);
            String updateQuery = "";
            while(DBM.DB_rs.next()){
                String result = DBM.DB_rs.getString("result");
                updateQuery = "UPDATE betting SET status = '";
                
                if(result.equals("진행예정")){
                    return; 
                }else if(result.equals(user_choice)){
                    updateQuery += "적중' WHERE B_no = "+b_no+";";
                    
                }else{
                    updateQuery += "적중 안됨' WHERE B_no = "+b_no+";";
                }
            }
            DBM.DB_stmt.executeUpdate(updateQuery);
            count++;
        } catch (Exception e) {
            System.out.println("update : "+e);
            JOptionPane.showMessageDialog(null, "예기치 못한 오류가 발생했습니다.");
        }
    }
   
    public final void refresh(){
        String query = "SELECT * FROM betting ORDER BY user_id";
        getDBData(query);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BettingList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bettingTable;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboId;
    private javax.swing.JComboBox<String> comboStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
